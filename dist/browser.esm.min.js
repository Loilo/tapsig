var log=(t,...e)=>{t&&console.log(..."string"==typeof e[0]?[`[tapsig] ${e[0]}`,...e.slice(1)]:e)};const TARGET=Symbol("Proxy target"),ALL=Symbol("Catch all"),MISSING=Symbol("Catch missing");function isTappable(t){return("object"==typeof t||"function"==typeof t)&&null!==t}function getInjectedProperty(t,e,n){const o=Object.getOwnPropertyDescriptor(n,e);return o&&"function"==typeof o.get?Reflect.apply(o.get,t,[]):Reflect.get(n,e)}function tapObject(t,e,n,o){if(!isTappable(t)||Reflect.has(t,TARGET))return t;return log(o,"tap %o",t),new Proxy(t,{has:(t,e)=>e===TARGET||Reflect.has(t,e),construct:(t,n)=>(log(o,"construct %o with %o",t,n),tapObject(Reflect.construct(t,n),e,null,o)),get(t,n){if(n===TARGET)return t;log(o,"get %o from %o",n,t);const c=("function"==typeof e?e(t):e)||Object.create(null);if(c instanceof Object?c.hasOwnProperty(n):n in c){log(o,"property %o shadowed by injected %o",n,c);const l=getInjectedProperty(t,n,c);return tapObject(l,e,"function"==typeof l?t:null,o)}if(c instanceof Object&&Reflect.has(c,ALL)){return log(o,"property %o caught by ALL",n),tapObject(Reflect.apply(Reflect.get(c,ALL),t,[n]),e,t,o)}if(Reflect.has(t,n))return tapObject(Reflect.get(t,n),e,null,o);if(c instanceof Object&&Reflect.has(c,MISSING)){return log(o,"property %o caught by MISSING",n),tapObject(Reflect.apply(Reflect.get(c,MISSING),t,[n]),e,t,o)}},apply:(t,n,c)=>(log(o,"call %o with %o as %o",t,c,n),tapObject(Reflect.apply(t,n,c),e,null,o))})}function tap(t,e=Object.create(null),n=!1){return tapObject(t,e,null,n)}function untap(t){return isTapped(t)?t[TARGET]:t}function isTapped(t){return isTappable(t)&&TARGET in t}export{ALL,MISSING,tap,untap,isTapped};
