var log=(t,...e)=>{t&&console.log(..."string"==typeof e[0]?[`[tapsig] ${e[0]}`,...e.slice(1)]:e)};const TARGET=Symbol("Proxy target"),PROMISE_MARKER=Symbol("Promise marker"),ALL=Symbol("Catch all"),MISSING=Symbol("Catch missing");function isTappable(t){return!("object"!=typeof t&&"function"!=typeof t||null===t||t instanceof Promise)}function getInjectedProperty(t,e,n){const o=Object.getOwnPropertyDescriptor(n,e);return o&&"function"==typeof o.get?Reflect.apply(o.get,t,[]):Reflect.get(n,e)}function tapObject(t,e,n,o){if(t instanceof Masked)return t.value;if(t instanceof Promise)return isTapped(t)?t:(t[PROMISE_MARKER]=!0,t.then(t=>tapObject(t,e,n,o)));if(!isTappable(t)||Reflect.has(t,TARGET))return t;return log(o,"tap %o",t),new Proxy(t,{has:(t,e)=>e===TARGET||Reflect.has(t,e),construct:(t,n)=>(log(o,"construct %o with %o",t,n),tapObject(Reflect.construct(t,n),e,null,o)),get(n,c){if(c===TARGET)return n;log(o,"get %o from %o",c,n);const r=("function"==typeof e?e(n):e)||Object.create(null);if("function"!=typeof t||null!==r&&"toString"in r||(r.toString=function(){return String(untap(this))}),r instanceof Object?r.hasOwnProperty(c):c in r){log(o,"property %o shadowed by injected %o",c,r);const t=getInjectedProperty(n,c,r);return tapObject(t,e,"function"==typeof t?n:null,o)}if(r instanceof Object&&Reflect.has(r,ALL)){return log(o,"property %o caught by ALL",c),tapObject(Reflect.apply(Reflect.get(r,ALL),n,[c]),e,n,o)}if(Reflect.has(n,c))return tapObject(Reflect.get(n,c),e,null,o);if(r instanceof Object&&Reflect.has(r,MISSING)){return log(o,"property %o caught by MISSING",c),tapObject(Reflect.apply(Reflect.get(r,MISSING),n,[c]),e,n,o)}},apply:(t,n,c)=>(log(o,"call %o with %o as %o",t,c,n),tapObject(Reflect.apply(t,n,c),e,null,o))})}function tap(t,e=Object.create(null),n=!1){return tapObject(t,e,null,n)}function untap(t){return isTapped(t)?t[TARGET]:t}function Masked(t){this.value=t}function mask(t){return new Masked(t)}function isTapped(t){return isTappable(t)&&TARGET in t||t instanceof Promise&&PROMISE_MARKER in t}export{ALL,MISSING,tap,untap,mask,isTapped};
